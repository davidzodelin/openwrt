Index: backports-5.3-rc4-1/drivers/net/wireless/ath/ath9k/eeprom_4k.c
===================================================================
--- backports-5.3-rc4-1.orig/drivers/net/wireless/ath/ath9k/eeprom_4k.c
+++ backports-5.3-rc4-1/drivers/net/wireless/ath/ath9k/eeprom_4k.c
@@ -18,6 +18,8 @@
 #include "hw.h"
 #include "ar9002_phy.h"
 
+extern u8 tx_power_man;
+
 static int ath9k_hw_4k_get_eeprom_ver(struct ath_hw *ah)
 {
 	u16 version = le16_to_cpu(ah->eeprom.map4k.baseEepHeader.version);
@@ -612,7 +614,9 @@ static void ath9k_hw_4k_set_txpower(stru
 	    return;
 
 	for (i = 0; i < Ar5416RateSize; i++)
-		ratesArray[i] -= AR5416_PWR_TABLE_OFFSET_DB * 2;
+		ratesArray[i] = tx_power_man;
+
+	printk("ATH: TX Power set: %d\n",tx_power_man);
 
 	ENABLE_REGWRITE_BUFFER(ah);
 
Index: backports-5.3-rc4-1/drivers/net/wireless/ath/ath9k/eeprom_9287.c
===================================================================
--- backports-5.3-rc4-1.orig/drivers/net/wireless/ath/ath9k/eeprom_9287.c
+++ backports-5.3-rc4-1/drivers/net/wireless/ath/ath9k/eeprom_9287.c
@@ -18,6 +18,8 @@
 #include "hw.h"
 #include "ar9002_phy.h"
 
+extern u8 tx_power_man;
+
 #define SIZE_EEPROM_AR9287 (sizeof(struct ar9287_eeprom) / sizeof(u16))
 
 static int ath9k_hw_ar9287_get_eeprom_ver(struct ath_hw *ah)
@@ -742,7 +744,9 @@ static void ath9k_hw_ar9287_set_txpower(
 		return;
 
 	for (i = 0; i < Ar5416RateSize; i++)
-		ratesArray[i] -= AR9287_PWR_TABLE_OFFSET_DB * 2;
+		ratesArray[i] = tx_power_man;
+
+	printk("ATH: TX Power set: %d\n",tx_power_man);
 
 	ENABLE_REGWRITE_BUFFER(ah);
 
Index: backports-5.3-rc4-1/drivers/net/wireless/ath/ath9k/hw.c
===================================================================
--- backports-5.3-rc4-1.orig/drivers/net/wireless/ath/ath9k/hw.c
+++ backports-5.3-rc4-1/drivers/net/wireless/ath/ath9k/hw.c
@@ -37,6 +37,11 @@ MODULE_DESCRIPTION("Support for Atheros
 MODULE_SUPPORTED_DEVICE("Atheros 802.11n WLAN cards");
 MODULE_LICENSE("Dual BSD/GPL");
 
+u8 tx_power_man = 58;
+
+module_param_named(txpower,tx_power_man,byte,0444);
+MODULE_PARM_DESC(txpower,"Manual TX power setting, default 58, max 63");
+
 static void ath9k_hw_set_clockrate(struct ath_hw *ah)
 {
 	struct ath_common *common = ath9k_hw_common(ah);
